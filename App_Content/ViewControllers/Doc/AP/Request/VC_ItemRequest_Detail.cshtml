@inherits System.Web.Mvc.WebViewPage
@using System.Web.Mvc;

@{
    Layout = null;
}
@Html.JsMinify(@<text>
//<script>
    define(['app', 'baseModelHelper'], function (app, baseModelHelper) {

        var VC_ItemRequest_Detail = function () {
      
        }
        
        VC_ItemRequest_Detail.prototype = Object.create(baseModelHelper.prototype);
          
        VC_ItemRequest_Detail.prototype.Init = function (VC) {

            baseModelHelper.prototype.Init.call(this, VC);

            var _ = this;
        }

        VC_ItemRequest_Detail.prototype.onInitDetailView = function (VC) {

            baseModelHelper.prototype.Init.call(this, VC);

            var _ = this;

            _.VC.$timeout(function () {
  
                VC.ValidationRules.push(function () {
                    
                    var brokenRules = [];

                    if(VC.$scope.CurrentObject.ID_Item == 0){

                        brokenRules.push('Please select a item.');
                    }
                    
                    VC.$scope.CurrentObject.Quantity = parseInt(VC.$scope.CurrentObject.Quantity);

                    if( VC.$scope.CurrentObject.Quantity == null || VC.$scope.CurrentObject.Quantity.toString() === "NaN"){
                            
                        VC.$scope.CurrentObject.Quantity = 0;
                    }

                    if(VC.$scope.CurrentObject.Quantity == 0){

                        brokenRules.push('Please input a quantity.');
                    }

                    if(brokenRules.length > 0){
                        return {
                            isValid: false,
                            brokenRules: brokenRules
                        }
                    }

                    return { isValid: true };
                });

            }, 500);
        }

        VC_ItemRequest_Detail.prototype.OnFormInitialized = function (VC) {

            var _ = this;
            
            var fBrowseItem = function(){

                var SQL = '@Html.EncryptSQL(@"SELECT * FROM vItemWidthInventoryAndTopSupplier WHERE IsActive = 1 AND ID_Warehouse = @ID_Warehouse ")'

                VC.BrowseDataSet(SQL,
                {
                    title: 'Select Items',
                    ID_View: '7744DCD5-8B04-47C1-B18F-79970138E771',
                    params: {
                        'ID_Item': VC.$scope.CurrentObject.ID_Item,
                        'ID_Warehouse': VC.$scope.CurrentObject.ID_Warehouse
                    },
                    validate: function (SelectedRows) {

                        if (SelectedRows.length > 1) {

                            _.VC.MsgBox("Please select Item atleast one.");
                            return false;
                        }
                        return true;
                    }
                }).then(function (Items) {
                    
                    $.each(Items, function (i, item) {

                        VC.$scope.CurrentObject.ID_Item = item.ID;
                        VC.$scope.CurrentObject.Code = item.Code;
                        VC.$scope.CurrentObject.ItemDescription = item.Description;
                        VC.$scope.CurrentObject.Description = item.Description;
                        VC.$scope.CurrentObject.Item = item.Description;
                        VC.$scope.CurrentObject.Name = item.Description;

                        VC.$scope.CurrentObject.ModelCode = item.ModelCode;
                        VC.$scope.CurrentObject.SupplierCode = item.SupplierCode;
                        VC.$scope.CurrentObject.IsSerialized = item.IsSerialized;
                        VC.$scope.CurrentObject.NonInventoriable = item.NonInventoriable;

                        VC.$scope.CurrentObject.ID_UOM = item.ID_UOM;
                        VC.$scope.CurrentObject.UOM = item.PrimaryUOM;
                        
                        VC.$scope.CurrentObject.UnitPrice = item.SRP;
                    })
                });
            }


            VC.btnItem.option('onClick', function () {

                fBrowseItem();
            });
        }
                    
        VC_ItemRequest_Detail.prototype.onLoad = function (VC) {

            baseModelHelper.prototype.onLoad(this, VC);
        }

        VC_ItemRequest_Detail.prototype.onCurrentObjectChanged = function (e) {

            baseModelHelper.prototype.onCurrentObjectChanged.call(this, e);

            var _ = this;
            var VC = this.VC;

            if (e.dataField == 'Quantity') {

                VC.$scope.CurrentObject.Quantity = parseInt(e.value);          

                if( VC.$scope.CurrentObject.Quantity == null ||  VC.$scope.CurrentObject.Quantity.toString() == "NaN"){

                    VC.$timeout(function () {
                        
                        VC.$scope.CurrentObject.Quantity = 0;
                    });
                }
            }
        }

        return VC_ItemRequest_Detail;
    });
//</script>
</text> , false )
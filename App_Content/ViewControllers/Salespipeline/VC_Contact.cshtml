@inherits System.Web.Mvc.WebViewPage
@using System.Web.Mvc;

@{
    Layout = null;
    var BaseVCUrl = "/JsApp/GetScript?Url=" + Url.Encode("Salespipeline/VC_BaseSalespipeline");
}
@Html.JsMinify(@<text>
//<script>
    define(['app','@BaseVCUrl','AcctHelper'], function (app, Base,AcctHelper) {

        var VC_Contact = function () { }
        
        VC_Contact.prototype = Object.create(Base.prototype);

        VC_Contact.prototype.Init = function (VC) {
            Base.prototype.Init.call(this, VC);
            var _ = this;

            if(_.ID_ViewType == 2){

                var formItem_Email = VC.GetFormItem("Email");
                formItem_Email.validationRules.push({
                    type: "email" 
                });
            }
            
            VC.AddToolbarButton({
                        text: 'New Diary',
                        IsDisabled: function(){
                            var Selecteds = null;
                            if(_.ID_ViewType == 2){
                                Selecteds = [_.CurrentObject];
                            }else{
                                Selecteds = _.Grid.getSelectedRowsData();
                            }   
                            if(Selecteds.length > 0){
                                if(Selecteds[0].ID > 0){
                                    return false;
                                }
                            }
                            return true;
                        },
                        icon: 'green mdi mdi-asterisk',
                        isContextMenu: true,
                        onItemClick: function(){
                            var Selecteds = null;
                            if(_.ID_ViewType == 2){
                                Selecteds = [_.CurrentObject];
                            }else{
                                Selecteds = _.Grid.getSelectedRowsData();
                            }                            
                            
                            AcctHelper.CreateDiaryFromContacts(Selecteds);
                            if(_.ID_ViewType == 2 && VC.IsModal == true){
                                VC.$timeout(function () {                                    
                                    VC.$scope.CloseModule(true);
                                }, 500);
                            }
                        }
            });

                        VC.AddToolbarButton({
                        text: 'Log a call',
                        IsDisabled: function(){
                            var Selecteds = null;
                            if(_.ID_ViewType == 2){
                                Selecteds = [_.CurrentObject];
                            }else{
                                Selecteds = _.Grid.getSelectedRowsData();
                            }   
                            if(Selecteds.length > 0){
                                if(Selecteds[0].ID > 0){
                                    return false;
                                }
                            }
                            return true;
                        },
                        icon: 'green mdi mdi-asterisk',
                        isContextMenu: true,
                        onItemClick: function(){
                            var Selecteds = null;
                            if(_.ID_ViewType == 2){
                                Selecteds = [_.CurrentObject];
                            }else{
                                Selecteds = _.Grid.getSelectedRowsData();
                            }                            
                            
                            AcctHelper.CreateDiaryFromContacts(Selecteds,6);
                        }
            });

                        VC.AddToolbarButton({
                        text: 'Log an Email',
                        IsDisabled: function(){
                            var Selecteds = null;
                            if(_.ID_ViewType == 2){
                                Selecteds = [_.CurrentObject];
                            }else{
                                Selecteds = _.Grid.getSelectedRowsData();
                            }   
                            if(Selecteds.length > 0){
                                if(Selecteds[0].ID > 0){
                                    return false;
                                }
                            }
                            return true;
                        },
                        icon: 'green mdi mdi-asterisk',
                        isContextMenu: true,
                        onItemClick: function(){
                            var Selecteds = null;
                            if(_.ID_ViewType == 2){
                                Selecteds = [_.CurrentObject];
                            }else{
                                Selecteds = _.Grid.getSelectedRowsData();
                            }                            
                            
                            AcctHelper.CreateDiaryFromContacts(Selecteds,1);
                        }
            });



        
        }


        VC_Contact.prototype.onInitDetailView = function (VC) {
            Base.prototype.onInitDetailView.call(this, VC);
        };

        VC_Contact.prototype.onCurrentObjectChanged = function (e) {
            Base.prototype.onCurrentObjectChanged.call(this);
            var _ = this;
            var VC = _.VC;

            if(e.dataField == 'LastName'){
                console.log('LastName')
                if(e.value !== null && e.value !== undefined){
                    if(e.value.length > 0){
                        var n = _.CurrentObject.LastName.split(' ');
                        var x = ''; 
                        $.each(n,function(i,o){
                            x += o[0].toUpperCase() + o.substring(1).toLowerCase() + ((n.length -1) == i ? '' : ' ');
                        });
                        _.CurrentObject.LastName = x;
                        console.log(x)
                    }

                }
            }

            if(e.dataField == 'FirstName'){
                console.log('FirstName')
                if(e.value !== null && e.value !== undefined){
                    if(e.value.length > 0){
                        var n = _.CurrentObject.FirstName.split(' ');
                        var x = ''; 
                        $.each(n,function(i,o){
                            x += o[0].toUpperCase() + o.substring(1).toLowerCase() + ((n.length -1) == i ? '' : ' ');
                        });
                        _.CurrentObject.FirstName = x;
                        console.log(x)
                    }

                }
            }

            if(e.dataField == 'MiddleName'){
                console.log('MiddleName')
                if(e.value !== null && e.value !== undefined){
                    if(e.value.length > 0){
                        var n = _.CurrentObject.MiddleName.split(' ');
                        var x = ''; 
                        $.each(n,function(i,o){
                            x += o[0].toUpperCase() + o.substring(1).toLowerCase() + ((n.length -1) == i ? '' : ' ');
                        });
                        _.CurrentObject.MiddleName = x;
                        console.log(x)
                    }

                }
            }

        }

        VC_Contact.prototype.onCurrentObjectSaved = function (CurrentObject) {

            Base.prototype.onCurrentObjectSaved.call(CurrentObject, this);

            var _ = this;
            var VC = _.VC;
            app.$GetDataService().ExecSQLProc('@Html.EncryptSQL("pSaveBusinessPartnerFromCustomerLeadContacts")', {
                IDs: [CurrentObject.ID]
            });
        }

        VC_Contact.prototype.onLoad = function () {
            Base.prototype.onLoad.call(this);
            var _ = this;
            var VC = _.VC;

            var CurrentUser = VC.CurrentUser === undefined ? VC.$scope.$root.CurrentUser :VC.CurrentUser;
            
            if(CurrentUser.ID !== _.CurrentObject.ID_CreatedBy){
                VC.setFormReadOnly(true);   
            }else{
                VC.setFormReadOnly(false);   

                // var CM = VC.GetDxControl('ID_Customer');
                // if(CM !== null){
                //     if(VC.IsModal == true){
                //         CM.option('readOnly',true);
                //     }
                // }
            }
   

            if (_.CurrentObject.ID_Customer == null) {
                
                VC.$timeout(function () {
                    
                    if(VC.FormInstance.getEditor('ID_Customer') != null){

                         VC.FormInstance.getEditor('ID_Customer').focus();
                    }

                }, 500);
            }

            
            $(".CustomerLead_Details").css('max-width','');



            /* Error Validation By Controls */
            

            VC.ValidationRules.push(function () {

                var brokenRules = [];
                var formItem_Email = VC.GetFormItem("Email");
                console.log(formItem_Email)
                formItem_Email.validationRules.forEach(function(rule) {
                    console.log('validationRules',rule)
                    if(rule.isValid == false && brokenRules.length == 0 && rule.message !== 'Email is required'){
                        brokenRules.push(rule.message);
                    }
                });


                if(brokenRules.length > 0){
                    return {
                        isValid: false,
                        brokenRules: brokenRules
                    }
                }
                return { isValid : true }
            });


            VC.ValidationRules.push(function () {
                var brokenRules = [];
                var IsContactValid = true;
                if(_.CurrentObject.MobileNo == null) _.CurrentObject.MobileNo = "";
                if(AcctHelper.ValidatePhoneNo(_.CurrentObject.MobileNo,12,2) == false){
                    IsContactValid = false;
                    brokenRules.push('Mobile No should be 12 digits');
                }   

                if(_.CurrentObject.Phone == null) _.CurrentObject.Phone = "";
                if(AcctHelper.ValidatePhoneNo(_.CurrentObject.Phone,10,3) == false){
                    IsContactValid = false;
                    brokenRules.push('Phone No should be 10 digits');
                }
                if(IsContactValid == true){
                    if(AcctHelper.ValidatePhoneNo(_.CurrentObject.Phone,10) == false 
                    && AcctHelper.ValidatePhoneNo(_.CurrentObject.MobileNo,12) == false){
                        brokenRules.push('Either Phone No or Mobile No is required.');
                    }
                }

                if(brokenRules.length > 0){
                    return {
                        isValid: false,
                        brokenRules: brokenRules
                    }
                }
                return { isValid : true }
            }); 

            // VC.ValidationRules.push(function () {
            //     var brokenRules = [];

            //     if(_.CurrentObject.Phone == null) _.CurrentObject.Phone = "";

            //     if(AcctHelper.ValidatePhoneNo(_.CurrentObject.Phone,10,3) == false){
            //         brokenRules.push('Phone No should be 10 digits');
            //     }


            //     if(brokenRules.length > 0){
            //         return {
            //             isValid: false,
            //             brokenRules: brokenRules
            //         }
            //     }
            //     return { isValid : true }
            // }); 
            /* Error Validation By Controls END */


            

        }

        VC_Contact.prototype.onInitDetailView = function (VC) {
            Base.prototype.onInitDetailView.call(this,VC);
            var _ = this;

            var MobileNo = VC.GetFormItem('MobileNo');
            if(MobileNo !== null){
                var _onFocusIn = MobileNo.editorOptions.onFocusIn;
                MobileNo.editorOptions.onFocusIn = function(e){                                      
                    $(e.element).find('.dx-texteditor-input')[0].selectionStart = 5;
                    if(_onFocusIn !== undefined && _onFocusIn !== null){
                        _onFocusIn(e);
                    } 
                }
            }

            var Phone = VC.GetFormItem('Phone');{
                var _onFocusIn = Phone.editorOptions.onFocusIn;
                Phone.editorOptions.onFocusIn = function(e){                                      
                    $(e.element).find('.dx-texteditor-input')[0].selectionStart = 5;
                    if(_onFocusIn !== undefined && _onFocusIn !== null){
                        _onFocusIn(e);
                    } 
                }
            }
        }


        VC_Contact.prototype.OnFormInitialized = function (VC) {
            var _ = this;

            
            //var MobileNo = VC.GetDxControl('MobileNo');
            //MobileNo.option('mask','+63(000)000-0000');

            //var Fax = VC.GetDxControl('Fax');
            //Fax.option('mask','(632)000-0000');

            //var PhoneNo = VC.GetDxControl('Phone');
            //PhoneNo.option('mask','(632)000-0000');

           
            
        }
        return VC_Contact;
    });
//</script>
</text> , false )
@inherits System.Web.Mvc.WebViewPage
@using InsysWebAccounting.Utility;

@using System.Web.Mvc;
@{
    Layout = null;
    var BaseVCUrl = Url.Encode("Inventory/VC_BaseInventory");
}
@Html.JsMinify(@<text>
//<script>
    define(['app', '/JsApp/GetScript?Url=@{@BaseVCUrl}','AcctHelper'], function (app, VC_BaseDoc, AcctHelper) {

        var VC_InventoryAdjustment = function () {
            this.DocDetailPropertyName = 'InventoryAdjustment_Details';
            this.SerialsEnabled = true;
            this.NewSerials = true;
            this.IsAddItemDisabled = true;
         }

        VC_InventoryAdjustment.prototype = Object.create(VC_BaseDoc.prototype);
        
        VC_InventoryAdjustment.prototype.Init = function (VC) {
            VC_BaseDoc.prototype.Init.call(this, VC);

            var _ = this;
            var JsDataService = app.$GetDataService();

            VC.AddButtonReport({
                Name: 'Inventory Adjustment Form',
                ID_Report: 3119,
                requireSingleObject: true
            });
            
            VC.AddToolbarButton({
                text: 'Generate Template',
                icon: 'mdi mdi-clipboard-arrow-down',
                IsDisabled: function () {
                    return false;
                },
                onItemClick: function () {
                    AcctHelper.CreateTemplate('SKUCode,Name,Quantity,Serial', 'ItemAdjustmentTemplate.csv', 'text/csv');
                }
            });


            if (_.ID_ViewType === 2) {



                  VC.AddToolbarButton({
                      text: 'Import',
                      IsDisabled: function () {
                          if(_.CurrentObject.ID_FilingStatus != 1){
                            return true;
                          }

                          return false;
                      },
                      onItemClick: function () {
                            if( _.CurrentObject.ID_Warehouse > 0){
                            }else{
                                VC.MsgBox('Please select a Warehouse', 'Inventory Adjustment');
                                return;
                            }

                                JsDataService.UploadCSV(
                                    '@Html.EncryptSQL("pImport_InventoryAdjustment2")', 
                                    {
                                        'ID_Warehouse' : _.CurrentObject.ID_Warehouse
                                    }, 
                                    'Import Inventory Adjustment'
                                ).then(function (data) {                          
                                    var ImportedData = data['_'];
                                    $.each(ImportedData, function (i, item) {
                                        var NewDetail = {
                                            ID: -1,
                                            ID_Item: item.ID,
                                            SKUCode: item.SKUCode,
                                            Item: item.Name,
                                            Name: item.Name,
                                            ItemCode: item.Code,
                                            Code: item.Code,
                                            SupplierCode: item.SupplierCode,
                                            PartNo: item.PartNo,
                                            Description: item.Description,
                                            Quantity: item.OnHand - item.Quantity,
                                            UnitPrice: item.SRP,
                                            UnitCost: item.SRP,
                                            ID_UOM: item.ID_UOM,
                                            UOM: item.PrimaryUOM,
                                            VatAmt: 0.00,
                                            IsFree: false,
                                            TaxScheme: 'VAT Inclusive',
                                            ID_TaxScheme: VC.$scope.CurrentObject.ID_TaxScheme,
                                            IsSerialized: item.IsSerialized,
                                            TotalAmount: 0.00,
                                            DocStatus: '',
                                            ID_DocStatus: null,
                                            IsCanvassed: false,
                                            ID_Customer: null,
                                            Customer: '',
                                            Reference: '',
                                            Comment: null,
                                            OnHand: item.OnHand,
                                            ActualQuantity: item.Quantity
                                        };

                                        var Serials = Enumerable.From(data['Serials']).Where("$.ID ==" + NewDetail.ID_Item).ToArray();
                                        var NewSerials = [];
                                        $.each(Serials,function(i,item){
                                                NewSerials.push({
                                                        ID: -1,
                                                        Name: item.Serial,
                                                        Code: item.Code
                                                });
                                        });

                                        NewDetail['InventoryAdjustment_Detail_Serials'] = NewSerials;

                                        VC.$timeout(function () {
                                            _.CurrentObject.InventoryAdjustment_Details.push(NewDetail);
                                        }, 500);
                                    });
                          });
                          //
                      }
                  });


                //ADD ITEM
                  VC.AddToolBarButtonOnGrid(_.DocDetailPropertyName, {
                        text: 'Add Item',
                        icon: 'mdi mdi-package-variant',
                        onClick: function () {

                            if ((_.CurrentObject.ID_Warehouse > 0) === false){
                                VC.MsgBox("Please Select Warehouse", "Inventory Adjustment");
                                return;
                            }

                            VC.BrowseDataSet('@Html.EncryptSQL(@"SELECT * FROM vInventoryOnHandPerWarehouse2 WHERE ID_Warehouse = @ID_Warehouse AND ID NOT IN(@ID_Item) AND IsActive = 1 AND IsPurchase = 1")', {
                                title: 'Select Items',
                                ID_View: 'D5099C4D-1C30-4D9D-AFF9-84019B712401',
                                params: {
                                    'ID_Warehouse': _.CurrentObject.ID_Warehouse,
                                    'ID_Item': Enumerable.From(_.CurrentObject[_.DocDetailPropertyName]).Select("$.ID_Item").ToArray()
                                }
                            }).then(function (Items) {

                                if (VC.$scope.CurrentObject[_.DocDetailPropertyName] == null) {
                                    VC.$scope.CurrentObject[_.DocDetailPropertyName] = [];
                                } 

                                $.each(Items, function (i, item) {

                                    var NewDetail = {
                                        ID: -1,
                                        ID_Item: item.ID,
                                        Item: item.Name,
                                        SKUCode: item.SKUCode,
                                        Name: item.Name,
                                        ItemCode: item.Code,
                                        Code : item.Code,
                                        SupplierCode: item.SupplierCode,
                                        PartNo : item.PartNo,
                                        Description: item.Description,
                                        Quantity: 0,
                                        UnitPrice: item.SRP,
                                        UnitCost: item.SRP,
                                        //-l ID_UOM: item.ID_UOM,
                                        ID_UOM: item.ID_UOMType,
                                        //-l UOM: item.PrimaryUOM,
                                        UOM: item.UOMType,
                                        VatAmt: 0.00,
                                        IsFree : false,
                                        TaxScheme: 'VAT Inclusive',
                                        ID_TaxScheme: VC.$scope.CurrentObject.ID_TaxScheme,
                                        IsSerialized : item.IsSerialized,
                                        TotalAmount: 0.00,
                                        DocStatus: '',
                                        ID_DocStatus: null,
                                        IsCanvassed: false,
                                        ID_Customer: null,
                                        Customer: '',
                                        Reference: '',
                                        Comment: null,
                                        OnHand: item.OnHand

                                    };

                                        
                                    VC.$timeout(function () {
                                        VC.$scope.CurrentObject[_.DocDetailPropertyName].push(NewDetail);
                                    },500);

                                });
                            });
                        }
                    }, true);
            }


        }

        VC_InventoryAdjustment.prototype.Approve = function (Items) {
            var $q = app.$GetAsync();
            var JsDataService = app.$GetDataService();
            var defer = $q.defer();

            JsDataService.ExecSQLProc(
                '@Html.EncryptSQL("pInventoryAdjustmentApprove")',
                {
                    'IDs': Enumerable.From(Items).Select('$.ID').ToArray(),
                    'ID_CurrentUser' : '#ID_CurrentUser'
                }
            ).then(function (response) {
                defer.resolve();
            }, function () {
                defer.reject();
            });

            return defer.promise;
        }

        VC_InventoryAdjustment.prototype.Cancel = function (Items, Reason) {
            var $q = app.$GetAsync();
            var JsDataService = app.$GetDataService();
            var defer = $q.defer();
        
            JsDataService.ExecSQLProc(
                '@Html.EncryptSQL("pInventoryAdjustmentCancel")',
                {
                    'IDs': Enumerable.From(Items).Select('$.ID').ToArray(),
                    'ID_CurrentUser': '#ID_CurrentUser',
                    'Reason': Reason
                }
            ).then(function (response) {
                defer.resolve();
            }, function () {
                defer.reject();
            });

            return defer.promise;
        }

        return VC_InventoryAdjustment;
    });
//</script>
</text> , false);

